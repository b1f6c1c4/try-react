/* eslint-disable redux-saga/yield-effects */
describe('handle{{ properCase sagaName }}Request Saga', () => {
  let {{ camelCase sagaName }}RequestGenerator;

  beforeEach(() => {
    {{ camelCase sagaName }}RequestGenerator = handle{{ properCase sagaName }}Request();

    const selectDescriptor = {{ camelCase sagaName }}RequestGenerator.next().value;
    expect(selectDescriptor).toMatchSnapshot();

    const callDescriptor = {{ camelCase sagaName }}RequestGenerator.next(data).value;
    expect(callDescriptor).toMatchSnapshot();
  });

  it('should dispatch the {{ camelCase sagaName }}Success action if it requests the data successfully', () => {
    const response = [{
      name: 'First',
    }, {
      name: 'Second',
    }];
    const putDescriptor = {{ camelCase sagaName }}RequestGenerator.next(response).value;
    expect(putDescriptor).toEqual(put({{ camelCase sagaName }}Success(response)));
  });

  it('should call the {{ camelCase sagaName }}Failure action if the response errors', () => {
    const response = new Error('Some error');
    const putDescriptor = {{ camelCase sagaName }}RequestGenerator.throw(response).value;
    expect(putDescriptor).toEqual(put({{ camelCase sagaName }}Failure(response)));
  });
});
