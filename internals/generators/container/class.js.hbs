import React from 'react';
import PropTypes from 'prop-types';
import { compose } from 'redux';
import { connect } from 'react-redux';
import { createStructuredSelector } from 'reselect';
{{#if wantMessages}}
import { FormattedMessage } from 'react-intl';
{{/if}}
{{#if wantActionsAndReducer}}
{{#if wantLoadable}}
import injectReducer from 'utils/injectReducer';
{{/if}}
{{/if}}
{{#if wantSaga}}
import injectSaga from 'utils/injectSaga';
{{/if}}

import {
  withStyles,
  Typography,
{{#if wantActionsAndReducer}}
  Button,
{{/if}}
} from 'material-ui';

import {
  makeSelect{{ properCase name }}Data,
} from './selectors';
{{#if wantActionsAndReducer}}
import {
  defaultAction,
} from './actions';
{{#if wantLoadable}}
import reducer from './reducer';
{{/if}}
{{/if}}
{{#if wantSaga}}
import saga from './saga';
{{/if}}
{{#if wantMessages}}
import messages from './messages';
{{/if}}

const styles = (theme) => ({
  content: {
    backgroundColor: theme.palette.background.default,
  },
});

class {{ properCase name }} extends React.PureComponent {
  render() {
    const { classes } = this.props;

    return (
      <div className={classes.content}>
        <Typography>{this.props.data}</Typography>
{{#if wantActionsAndReducer}}
        <Button onClick={this.props.onDefaultAction}>DefaultAction</Button>
{{/if}}
{{#if wantMessages}}
        <FormattedMessage {...messages.header} />
{{/if}}
      </div>
    );
  }
}

{{ properCase name }}.propTypes = {
  classes: PropTypes.object.isRequired,
  data: PropTypes.string.isRequired,
{{#if wantActionsAndReducer}}
  onDefaultAction: PropTypes.func.isRequired,
{{/if}}
};

{{#if wantActionsAndReducer}}
export function mapDispatchToProps(dispatch) {
  return {
    onDefaultAction: () => dispatch(defaultAction()),
  };
}

{{/if}}
const mapStateToProps = createStructuredSelector({
  data: makeSelect{{ properCase name }}Data(),
});

export const styled{{ properCase name}} = withStyles(styles, { withTheme: true })({{ properCase name}});

export default compose(
{{#if wantSaga}}
  injectSaga({ key: '{{ camelCase name }}', saga }),
{{/if}}
{{#if wantActionsAndReducer}}
{{#if wantLoadable}}
  injectReducer({ key: '{{ camelCase name }}', reducer }),
{{/if}}
  connect(mapStateToProps, mapDispatchToProps),
{{else}}
  connect(mapStateToProps, null),
{{/if}}
)(styled{{ properCase name }});
