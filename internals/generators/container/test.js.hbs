import React from 'react';
import Enzyme, { shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

{{#if wantActionsAndReducer}}
import { styled{{ properCase name }} as {{ properCase name }}, mapDispatchToProps } from '../index';
{{else}}
import { styled{{ properCase name }} as {{ properCase name }} } from '../index';
{{/if}}

{{#if wantActionsAndReducer}}
import {
  {{ camelCase actionName }}Action,
} from '../actions';
{{/if}}

Enzyme.configure({ adapter: new Adapter() });

describe('<{{ properCase name }} />', () => {
  it('should render', () => {
    const renderedComponent = shallow(
{{#ifOr wantSelectors wantActionsAndReducer}}
      <{{ properCase name }}
{{#if wantSelectors}}
        // Selectors
        {{ camelCase selectorName }}="value"
{{/if}}
{{#if wantActionsAndReducer}}
        // Actions
        on{{ properCase actionName }}Action={jest.fn()}
{{/if}}
      />
{{else}}
      <{{ properCase name }} />
{{/ifOr}}
    ).dive();
    expect(renderedComponent).toBeDefined();
  });
});

{{#if wantActionsAndReducer}}
describe('mapDispatchToProps', () => {
  // Actions
  describe('on{{ properCase actionName }}Action', () => {
    it('should be injected', () => {
      const dispatch = jest.fn();
      const result = mapDispatchToProps(dispatch);
      expect(result.on{{ properCase actionName }}Action).toBeDefined();
    });

    it('should dispatch {{ camelCase actionName }}Action when called', () => {
      const dispatch = jest.fn();
      const result = mapDispatchToProps(dispatch);
      result.on{{ properCase actionName }}Action();
      expect(dispatch).toHaveBeenCalledWith({{ camelCase actionName }}Action());
    });
  });
});
{{/if}}
