import React from 'react';
import { fromJS } from 'immutable';
import { createStore } from 'redux';
import Enzyme, { shallow } from 'enzyme';
import Adapter from 'enzyme-adapter-react-16';

{{#if wantActionsAndReducer}}
import {{ properCase name }}, { mapDispatchToProps } from '../index';
{{else}}
import {{ properCase name }} from '../index';
{{/if}}

{{#if wantActionsAndReducer}}
import {
  defaultAction,
} from '../actions';
{{/if}}

Enzyme.configure({ adapter: new Adapter() });

describe('<{{ properCase name }} />', () => {
  it('should render', () => {
    const reducer = (s) => s;
    const store = createStore(reducer, fromJS({
      {{ camelCase name }}: {
        data: 'value',
      },
    }));
    let renderedComponent = shallow(
      <{{ properCase name }} store={store} />
    );
{{#if wantSaga}}
    renderedComponent = renderedComopnent.dive(); // withSaga
{{/if}}
{{#if wantActionsAndReducer}}
{{#if wantLoadable}}
    renderedComponent = renderedComopnent.dive(); // withReducer
{{/if}}
{{/if}}
    renderedComponent = renderedComopnent.dive(); // withConnect
    renderedComponent = renderedComopnent.dive(); // withStyles
    expect(renderedComponent.length).not.toBe(0);
  });
});

{{#if wantActionsAndReducer}}
describe('mapDispatchToProps', () => {
  describe('onDefaultAction', () => {
    it('should be injected', () => {
      const dispatch = jest.fn();
      const result = mapDispatchToProps(dispatch);
      expect(result.onDefaultAction).toBeDefined();
    });

    it('should dispatch defaultAction when called', () => {
      const dispatch = jest.fn();
      const result = mapDispatchToProps(dispatch);
      result.onDefaultAction();
      expect(dispatch).toHaveBeenCalledWith(defaultAction());
    });
  });
});
{{/if}}
